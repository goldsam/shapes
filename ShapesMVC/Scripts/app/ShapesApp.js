var shapesApp = angular.module('ShapesApp', ['ngRoute', 'ngResource', 'ui.bootstrap']);

// Configura application routes.
shapesApp.config(['$routeProvider',
  function ($routeProvider) {
      $routeProvider.
        when('/About', {
            templateUrl: 'Templates/About.html',
            controller: 'ShapesController'
        }).
        when('/Shapes', {
            templateUrl: 'Templates/Shapes.html',
            controller: 'ShapesController'
        }).
        otherwise({
            redirectTo: '/Shapes'
        });
  }]);

// Define a factory which provides API resources.
shapesApp.factory('Api', function ($resource) {
     return {
         Shapes: $resource(
             '/api/Shapes/:id',
             { id: '@id' },
             { 'query': { method: 'GET', isArray: false } })
     };
});

// Simple filter used to capitalize the first letter in a string.
shapesApp.filter('capitalize', function () {
    return function (value, scope) {
        if (value != null && value.length > 0) {
            value = value.substring(0, 1).toUpperCase() + value.substring(1);
        }

        return value;
    }
});

// Shapes controller - bulk of the application.
shapesApp.controller('ShapesController', function($scope, Api) {

    //
    // Initialize default default view-model state.
    //

    // history of previously submitted shapes.
    $scope.shapeHistory = [];

    // parameters of next shape to be generated by a call to $scope.createShape().
    $scope.parameters = {
        type: "triangle",
        height: 4,
        label: "Hi!",
        labelRow: 2
    };

    // currently selected shape.
    $scope.selectedShape = null;

    // parameters for the currently visible page in the shape history.
    $scope.paging = {
        page: 1,
        pageSize: null,
        totalCount: null
    };

    // User-friendly status message.
    $scope.status = "";

    /**
     * Sets a given shape as selected.
     *
     * @param shape shape to set as selected.
     */
    $scope.selectShape = function(shape) {
        $scope.parameters = angular.copy(shape.parameters);
        $scope.selectedShape = shape;
    }

    /**
     * Fetches the paged set of shapes current specdified by the $scope.paging object.
     * 
     * @param selectFirst <code>true</code> if the first object in the returned
     * set should be set as the selected shape.
     */
    $scope.fetchShapes = function() {
        $scope.status = "Getting shape history...";
        $('#overlay').show();
        Api.Shapes.query($scope.paging,
            function (response) {
                $scope.shapeHistory = response.data;
                $scope.paging = {
                    page: response.page,
                    pageSize: response.pageSize,
                    totalCount: response.totalCount
                };

                $scope.status = "";
                $('#overlay').hide();
            },
            function () {
                $scope.status = "Unable to fetch shape history.";
                $('#overlay').hide();
            });
    };

    /**
     * Creates the shape currently specified by the $scope.parameters object.
     */
    $scope.createShape = function () {

        $('#overlay').show();
        $scope.status = "Creating shape...";

        Api.Shapes.save($scope.parameters,
            function (shape, status, headers, config) {
                $scope.selectShape(shape);
                $scope.paging.page = 1;
                $scope.fetchShapes(false);

                $scope.status = "";
                $('#overlay').hide();
            },
            function () {
                $scope.status = "Unable to create shape.";
                $('#overlay').hide();
            });
    };

    /**
     * Returns <code>true</code> if a given shape is currently selected.
     *
     * @param shape shape to test if currently selected.
     * @return <code>true</code> if <code>shape</code> is currently selected.
     */
    $scope.isShapeSelected = function(shape) {
        var selectedShape = $scope.selectedShape;
        return selectedShape && shape && selectedShape.parameters.id === shape.parameters.id;
    }

    // Fetch and select from our shape history.
    $scope.fetchShapes();
});